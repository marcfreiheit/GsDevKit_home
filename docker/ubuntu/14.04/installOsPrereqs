#! /usr/bin/env bash
#=========================================================================
# Copyright (c) 2015, 2-16 GemTalk Systems, LLC <dhenrich@gemtalksystems.com>.
#
#   MIT license: https://github.com/GsDevKit/GsDevKit_home/blob/master/license.txt
#=========================================================================

theArgs="$*"
source ${GS_HOME}/bin/private/shFeedback
start_banner

usage() {
  cat <<HELP
  USAGE: $(basename $0) [-h] client|server|both

  Verify machine is capable of running GemStone 64-bit (Mac and Linux)
  Add shared memory setup to /etc/sysctl.conf (Mac and Linux)
  Add GemStone netldi service port to /etc/services (Mac and Linux)
  Install operating system prerequisites (Ubuntu14.04 and Ubuntu12.04)

  Should not be run as root \`sudo\` is used to install operating system prereqs and
  setup shared memory (Mac and Linux)

EXAMPLES
   $(basename $0) -h
   $(basename $0) client
   $(basename $0) server
   $(basename $0) both

HELP
}

# We should run this as a normal user, not root.
if [ `id | cut -f2 -d= | cut -f1 -d\(` -eq 0 ]
    then
    exit_1_banner "This script must be run as a normal user, not root."
fi

while getopts "h" OPT ; do
  case "$OPT" in
    h) usage; exit 0 ;;
    *) ;;
  esac
done
shift $(($OPTIND - 1))

if [ $# -ne 1 ]; then
  usage; exit_1_banner "wrong number of arguments (1 expected)"
fi

x11client="true";;

# touch the following file, if you prefer to skip the installation of prerequisites
osPrereqsSysSetup=$GS_HOME/bin/.osPrereqsSysSetup # if file exists, skip linux prereq installation
sharedMemorySysSetup=$GS_HOME/bin/.sharedMemorySysSetup # if file exists, skip shared memory setup
gsdevkitSysSetup=$GS_HOME/bin/.gsdevkitSysSetup # if file exists, shared memory setup already completed

if [ -e "$gsdevkitSysSetup" ]; then
  echo "Skip operating system configuration steps, system already setup ($gsdevkitSysSetup exists)"
  exit_0_banner "...finished"
fi


if [ -e "$sharedMemorySysSetup" ]; then
  echo "Skip shared memory setup, shared memory setup already done, ($sharedMemorySysSetup exists)"
else
  echo "[Info] Setting up shared memory"
  # Ref: http://developer.postgresql.org/pgdocs/postgres/kernel-resources.html
  # Ref: http://www.idevelopment.info/data/Oracle/DBA_tips/Linux/LINUX_8tml

  # use TotalMem: kB because Ubuntu doesn't have Mem: in Bytes
  totalMemKB=`awk '/MemTotal:/{print($2);}' /proc/meminfo`
  totalMem=$(($totalMemKB * 1024))
  # Figure out the max shared memory segment size currently allowed
  shmmax=`cat /proc/sys/kernel/shmmax`
  # Figure out the max shared memory currently allowed
  shmall=`cat /proc/sys/kernel/shmall`
  
  totalMemMB=$(($totalMem / 1048576))
  shmmaxMB=$(($shmmax / 1048576))
  shmallMB=$(($shmall / 256))

  # Print current values
  echo "  Total memory available is $totalMemMB MB"
  echo "  Max shared memory segment size is $shmmaxMB MB"
  echo "  Max shared memory allowed is $shmallMB MB"

  # Figure out the max shared memory segment size (shmmax) we want
  # Use 75% of available memory but not more than 2GB
  shmmaxNew=$(($totalMem * 3/4))
  [ $shmmaxNew -gt 2147483648 ] && shmmaxNew=2147483648
  shmmaxNewMB=$(($shmmaxNew / 1048576))

  # Figure out the max shared memory allowed (shmall) we want
  # The MacOSX default is 4MB, way too small
  # The Linux default is 2097152 or 8GB, so we should never need this
  # but things will certainly break if it's been reset too small
  # so ensure it's at least big enough to hold a fullsize shared memory segment
  shmallNew=$(($shmmaxNew / 4096))
  [ $shmallNew -lt $shmall ] && shmallNew=$shmall
  shmallNewMB=$(($shmallNew / 256))

  # Increase shmmax if appropriate
  if [ $shmmaxNew -gt $shmmax ]; then
    echo "[Info] Increasing max shared memory segment size to $shmmaxNewMB MB"
    [ $PLATFORM = "Darwin-i386" ] \
      && sudo sysctl -w kern.sysv.shmmax=$shmmaxNew
    [ $PLATFORM = "Linux-x86_64" ] \
      && sudo bash -c "echo $shmmaxNew > /proc/sys/kernel/shmmax" \
      && sudo /bin/su -c "echo 'kernel.shmmax=$shmmaxNew' >>/etc/sysctl.conf"
  else
    echo "[Info] No need to increase max shared memory segment size"
  fi

  # Increase shmall if appropriate
  if [ $shmallNew -gt $shmall ]; then
    echo "[Info] Increasing max shared memory allowed to $shmallNewMB MB"
    [ $PLATFORM = "Darwin-i386" ] && sudo sysctl -w kern.sysv.shmall=$shmallNew
    [ $PLATFORM = "Linux-x86_64" ] \
      && sudo bash -c "echo $shmallNew > /proc/sys/kernel/shmall" \
      && sudo /bin/su -c "echo 'kernel.shmall=$shmallNew' >>/etc/sysctl.conf"
  else
    echo "[Info] No need to increase max shared memory allowed"
  fi
  # At this point, shared memory settings contain the values we want

  # Now setup for NetLDI in case we ever need it.
  echo "[Info] Setting up GemStone netldi service port"
  if [ `grep -sc "^gs64ldi" /etc/services` -eq 0 ]; then
    echo '[Info] Adding "gs64ldi  50377/tcp" to /etc/services'
    sudo bash -c 'echo "gs64ldi         50377/tcp        # Gemstone netldi"  >> /etc/services'
  else
    echo "[Info] GemStone netldi service port is already set in /etc/services"
    echo "To change it, remove the following line from /etc/services and rerun this script"
    grep "^gs64ldi" /etc/services
  fi

  # Create some directories that GemStone expects; make them writable
  echo "[Info] Creating /opt/gemstone directory"
  if [ ! -e /opt/gemstone ]
    then
    sudo mkdir -p /opt/gemstone /opt/gemstone/log /opt/gemstone/locks
    sudo chown $USER:${GROUPS[0]} /opt/gemstone /opt/gemstone/log /opt/gemstone/locks
    sudo chmod 770 /opt/gemstone /opt/gemstone/log /opt/gemstone/locks
  else
    echo "[Warning] /opt/gemstone directory already exists"
    echo "to replace it, remove or rename it and rerun this script"
  fi
  cat - > $sharedMemorySysSetup << EOF
the presence of this file means that \$GS_HOME/bin/installOsPrereqs has 
set up shared memory for GemStone/S 64
EOF
fi 

case "$PLATFORM" in
  Linux-x86_64)
    # Linux prereq installation
    if [ -e "$osPrereqsSysSetup" ]; then
      echo "Skip operating system prerequisites, operating system prerequisites already installed ($osPrereqsSysSetup exists)"
    fi

    cat - > $osPrereqsSysSetup << EOF
the presence of this file means that \$GS_HOME/bin/installOsPrereqs has 
installed the prerequisites for GemStone/S 64
EOF
	fi
    ;;
  *) # nothing special needed
    ;;
esac
cat - > $gsdevkitSysSetup << EOF
the presence of this file means that \$GS_HOME/bin/installOsPrereqs has 
configured the OS for running GemStone/S 64, including the setup of shared memory
EOF
# End of script
exit_0_banner "...finished"
